// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  password      String
  phone         String?
  first_name    String?
  last_name     String?
  push_token    String?
  profile_photo String? @db.VarChar(200)
  timezone      String? @db.VarChar(20)

  @@map(name: "admin_users")
}

model AdminPasswordReset {
  id          Int     @id @default(autoincrement())
  email       String  @unique @db.VarChar(200)
  reset_code  String  @db.VarChar(200)
  reset_token String? @db.VarChar(200)

  @@map(name: "admin_password_resets")
}

model Attachment {
  id           Int      @id @default(autoincrement())
  url          String
  datetime     DateTime @default(now())
  user_id      Int?
  care_home_id Int?
  city_id      Int?
  short_order  Int      @default(1)

  @@map(name: "attachments")
}

model Newsletter {
  id    Int    @id @default(autoincrement())
  email String @db.VarChar(200)

  @@map(name: "newsletters")
}

model OtpVerification {
  id    Int     @id @default(autoincrement())
  otp   Int
  email String  @unique @db.VarChar(200)
  phone String? @db.VarChar(200)

  @@map(name: "otp_verifications")
}

model Testimonial {
  id         Int     @id @default(autoincrement())
  user_name  String  @db.VarChar(200)
  desc       String?
  city       String? @db.VarChar(200)
  image      String? @db.VarChar(200)
  sort_order Int     @default(1)

  @@map(name: "testimonials")
}

model Address {
  id                 Int     @id @default(autoincrement())
  user_id            Int
  name               String?
  email              String?
  phone              String?
  alternative_phone  String?
  address_line_1     String?
  address_line_2     String?
  city               String? @db.VarChar(200)
  postal_cdoe        String? @db.VarChar(200)
  country            String? @db.VarChar(200)
  is_billing_address Boolean @default(true)
  User               User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@map(name: "addresses")
}

model Favorite {
  id           Int      @id @default(autoincrement())
  user_id      Int?
  partner_id   Int?
  care_home_id Int
  date         DateTime @default(now())

  @@map(name: "favorites")
}

model Setting {
  id    Int     @id @default(autoincrement())
  key   String  @unique
  value String?

  @@map(name: "settings")
}

model ResetPassword {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  token       String
  otp         String  @db.VarChar(10)
  role        String
  is_verified Boolean @default(false)

  @@map(name: "reset_password")
}



model Product {
  id             Int              @id @default(autoincrement())
  name           String
  permalink      String?          @db.VarChar(200)
  description    String?
  content        String?
  sku            String?          @db.VarChar(200)
  price          Float?
  discount_id    Int?
  cost_pert_item Float?
  barcode        String?          @db.VarChar(200)
  stock_status   String?          @db.VarChar(200)
  stock_quantity Int?
  weight         Float?
  length         Float?
  wide           Float?
  height         Float?
  status         String?          @db.VarChar(200)
  store_id       Int?
  is_featured    Boolean?
  category_id    Int?
  brand_id       Int?
  featured_image String?
  collection_tag String?          @db.VarChar(200)
  label          String?          @db.VarChar(200)

  @@map(name: "products")
}



model User {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique @db.VarChar(200)
  phone           String?           @unique @db.VarChar(200)
  date_of_birth   DateTime?
  password        String
  status          String?           @db.VarChar(200)
  profile_image   String?
  is_vendor       Boolean?
  private_notes   String?
  is_verified     Boolean           @default(false)
  address         String?
  description     String?
  Address         Address[]

  @@map(name: "users")
}

model Page {
  id          Int       @id @default(autoincrement())
  name        String
  permalink   String?
  description String?   @db.VarChar(200)
  content     String?   @db.VarChar(200)
  status      String?   @db.VarChar(200)
  templete    String?   @db.VarChar(200)
  image       String?   @db.VarChar(200)
  Faq         Faq[]

  @@map(name: "pages")
}

model Faq {
  id       Int     @id @default(autoincrement())
  page_id  Int?
  question String?
  answer   String?
  Page     Page?   @relation(fields: [page_id], references: [id])

  @@map(name: "faqs")
}

model Blog {
  id              Int       @id @default(autoincrement())
  title           String
  author_name     String?
  category        String?   @db.VarChar(200)
  short_desc      String?   @db.VarChar(200)
  description     String?   @db.VarChar(200)
  content         String?   @db.VarChar(200)
  author_image    String?   @db.VarChar(200)
  blog_image      String?   @db.VarChar(200)

  @@map(name: "blogs")
}